//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/VRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInput"",
    ""maps"": [
        {
            ""name"": ""LeftHandRaw"",
            ""id"": ""e8614a41-1f1e-48e6-ac9c-f7649b8a0c46"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""59110b5f-95f5-45af-8f64-5f2fd270b2ef"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""c79b81c3-5df9-4e09-b053-c7fdab52bc05"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Button 1"",
                    ""type"": ""Button"",
                    ""id"": ""d42035d9-a9fa-4569-8504-4066aba6f971"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Button 1 Touch"",
                    ""type"": ""Button"",
                    ""id"": ""f9ef49b3-dcf3-49a6-96a9-c6968b6c467c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 2"",
                    ""type"": ""Button"",
                    ""id"": ""1e105495-e6ed-40f9-b351-648fe61a8273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Button 2 Touch"",
                    ""type"": ""Button"",
                    ""id"": ""8af52727-e377-48c0-a06a-4db04b6418e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 3"",
                    ""type"": ""Button"",
                    ""id"": ""ab8d4bac-c921-48c6-942f-5bfff131d4d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""fa95f139-7f71-455b-a50f-1af381768529"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""5e9e770b-b978-4c52-91f8-ba793857a7ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""10b5db17-deb7-4ee1-bc80-63a61b6572d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick Touch"",
                    ""type"": ""Button"",
                    ""id"": ""1513e184-a239-4fbb-96bc-f442828b953d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""076c875f-49b9-4afb-84ea-78a3d3564613"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""2ece01be-91ad-42a2-908c-ed3d0dc6fb77"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""7fe7ed75-83b6-4bc5-b1e3-ce82adecafd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""14b89ea0-6aa6-48f4-bd1f-e4afb0a62042"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""92866989-e12b-4802-a3ae-6b1a0be1bc42"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UserPresent"",
                    ""type"": ""Value"",
                    ""id"": ""d5a8c99d-11de-46d6-a7f1-9cb836bc31b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""393482ed-4650-459c-9f77-296fb3a8f027"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdf0af6e-a848-48f0-bcfb-a6f1df482184"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aaf0dc35-bfa8-4221-a763-509277380e28"",
                    ""path"": ""<XRController>{LeftHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29784d23-46b5-4c09-a8e2-088074d750ba"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e7f355d-f669-4e43-af1a-6fb8c6a4c678"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31dc9b43-6a82-4560-b972-8c70f913b44d"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68c666ca-47f1-412e-854e-39cee2f40601"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""ef88dca7-be71-47a5-987d-422e24f92177"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""c078cb56-1cb0-4922-aee2-8e63cb528dbc"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""ed3c2996-35d9-4bfe-91e9-123e6eab4d33"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""419014dc-b018-4f3c-b992-14ecdd2396ef"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7ccfde4d-d271-42ff-9925-f6fa15a999b7"",
                    ""path"": ""<XRController>{LeftHand}/secondaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2 Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b95e3a9-3335-427d-995f-eac7203a8196"",
                    ""path"": ""<XRController>{LeftHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1 Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b82cf293-0542-4ec9-830a-1381ffd7ae46"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstickTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45182916-c640-4124-bb45-3176a570138e"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d65a552-b4b3-4937-a783-4d75456d88f7"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""ff4da60d-0123-4658-94e6-463db12771ab"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""b8848afc-93c6-494e-ab2e-4e37b4d61a24"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""22f8ffcd-43c8-4a98-8509-233607ede87e"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""a337c0a2-3433-42da-8ab8-722d6ee4dbbd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3f3b0042-50f5-4c25-9eb5-0841fa022e0a"",
                    ""path"": ""<XRController>{LeftHand}/userPresence"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UserPresent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb710198-fc47-4e41-93a9-1ec7db335e9d"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc52bd0b-4b19-41f3-a749-5e2d6ecd5e96"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxisClick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHandRaw"",
            ""id"": ""ee130c87-f227-4b34-adad-2dc10cf178d5"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""c6f781bd-0eb2-4ebf-8a13-37a26cf3133c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ac551710-b3ad-494d-96f6-d51bab449cde"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Button 1"",
                    ""type"": ""Button"",
                    ""id"": ""b00d4e09-fb51-4879-8a41-1a7129559da1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 1 Touch"",
                    ""type"": ""Button"",
                    ""id"": ""8fc2ce25-05bf-4592-976d-df66c19600e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 2"",
                    ""type"": ""Button"",
                    ""id"": ""f6a5949b-97b1-4c32-92f5-da94a1f481f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 2 Touch"",
                    ""type"": ""Button"",
                    ""id"": ""ddfea4fc-6f59-4c81-8151-e7000da18ae3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button 3"",
                    ""type"": ""Button"",
                    ""id"": ""c851ee3a-621f-4fa6-af72-d066052adaa1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""b2264828-809d-425d-bb94-996cd5734017"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trigger Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""855a5ff5-9181-4fa1-800e-02f47f8904dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""93412fcf-9d22-4ca0-8dd9-956278a9847b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick Touch"",
                    ""type"": ""Button"",
                    ""id"": ""2a58b7aa-9e09-4037-8867-3a2a1dd2f034"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""05186101-9966-46ab-aa78-fbb6574eed55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""9c97ab4f-1479-4eae-916f-e40bc3d1161a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""c72aee0d-e258-4a0e-ac0b-1efd62159c1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d297ed4d-167b-417a-b083-6881b9116f03"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""74d377d0-4693-4162-827b-2c4848236d34"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UserPresent"",
                    ""type"": ""Value"",
                    ""id"": ""01408f4f-5276-405d-87e3-c69df6539edf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""efed4f2c-116a-42ae-9a16-153079aaf7e5"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f119707e-3a13-4884-b767-904809c282ee"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bec10412-bb2f-4f45-8298-c987e7361a19"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de9535d5-b591-481d-94a6-15ebecf3f5db"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cfa685c-6a48-4d16-a125-2f7ead7070f6"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8227f8e8-d03c-4617-b103-1f3fbd600b93"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e858565c-e674-4617-9508-cd662433976f"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstickTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e2fd526-1bb9-4c3e-8d37-5e207e0539f4"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxisClick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""542083f0-98cd-4af8-90f8-14ef4aa8ca5d"",
                    ""path"": ""<XRController>{RightHand}/secondaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 2 Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b150d384-8698-4842-9694-9deb8682deaf"",
                    ""path"": ""<XRController>{RightHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button 1 Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""a1a2a7e2-b7e8-4570-b6b9-e8a59a733307"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""77d2070d-d4a1-4f71-b58e-9f417934ac38"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""6648e23d-7421-4cb1-91c1-acf2a0cb16c8"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""d221cc24-e22d-4da0-8f5c-dba2df9a600d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""fe1a8497-e338-4d0a-8963-b5ae21bf694b"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""8d730dda-2f9a-43e3-97d8-dd257a453c01"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""822a7960-7cd5-42b8-be62-1af17bce58e9"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""85f4a7ee-8cf0-4081-b46b-fb94f7eea4cf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5cf5f427-9fdf-42e6-9af5-35cf9a1af4f6"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc46201b-7e39-402e-8ba7-e6ce910892f8"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Trigger Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d28efc3-05cb-4d07-ae27-f3a5d88b992f"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2709c609-1580-4bc7-aa78-859283d908d8"",
                    ""path"": ""<XRController>{RightHand}/userPresence"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UserPresent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""007a0471-8f44-402c-baf9-af2d5cde78ac"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""id"": ""3e218763-6404-421c-afbd-1fcff076455e"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ccee9991-52be-439a-8e79-e725c72e1bc3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b75d2aff-c537-4a6b-93d2-d76d4724ef05"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46d1580a-00f6-4f93-9fc9-38b0054455c9"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb017622-bed3-4e71-bdcc-87696864e609"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""a218a7f7-cce5-43bb-9275-e884c35c9de5"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""27b69a74-d078-4455-9571-2f726872d071"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""f596e7b0-037d-4dc4-a0bd-7c362325bee4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""84f8ee2e-4904-44a4-86f2-4f1768c5b79f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""f81f3eae-cfe0-4c9a-86db-239699203af0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f66f247b-872a-4d7f-abd8-83e66192f099"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e43c7136-8c0f-4208-bc94-db7b34a4fe70"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0104396e-df1a-465a-ab8a-bbdd5b760bfb"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""058c2242-ae9b-4e9f-a64f-e3affe5d65f8"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""fef2d519-ec4a-4f45-91ac-dd39bb82bc99"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""e6773f80-dc09-4873-bb01-2146468cb5ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""689dd989-3ff9-4a65-adb2-a6114ab1dc01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""689dddf7-462c-46ae-b2e4-cbbca540485c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""8f65413b-1e7d-4547-b848-2139e551226e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be1aea28-7b40-4aa4-a864-1cfd49a7c6a4"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""160f6f7b-6c1b-4466-9d08-3c22f0f9fc6d"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbd238e0-fe32-4fac-92d8-3b51c68a030d"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96b221ea-df9c-4cb5-bad0-266558f152f7"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftHandRaw
        m_LeftHandRaw = asset.FindActionMap("LeftHandRaw", throwIfNotFound: true);
        m_LeftHandRaw_Position = m_LeftHandRaw.FindAction("Position", throwIfNotFound: true);
        m_LeftHandRaw_Rotation = m_LeftHandRaw.FindAction("Rotation", throwIfNotFound: true);
        m_LeftHandRaw_Button1 = m_LeftHandRaw.FindAction("Button 1", throwIfNotFound: true);
        m_LeftHandRaw_Button1Touch = m_LeftHandRaw.FindAction("Button 1 Touch", throwIfNotFound: true);
        m_LeftHandRaw_Button2 = m_LeftHandRaw.FindAction("Button 2", throwIfNotFound: true);
        m_LeftHandRaw_Button2Touch = m_LeftHandRaw.FindAction("Button 2 Touch", throwIfNotFound: true);
        m_LeftHandRaw_Button3 = m_LeftHandRaw.FindAction("Button 3", throwIfNotFound: true);
        m_LeftHandRaw_Trigger = m_LeftHandRaw.FindAction("Trigger", throwIfNotFound: true);
        m_LeftHandRaw_TriggerPressed = m_LeftHandRaw.FindAction("Trigger Pressed", throwIfNotFound: true);
        m_LeftHandRaw_Joystick = m_LeftHandRaw.FindAction("Joystick", throwIfNotFound: true);
        m_LeftHandRaw_JoystickTouch = m_LeftHandRaw.FindAction("Joystick Touch", throwIfNotFound: true);
        m_LeftHandRaw_JoystickPressed = m_LeftHandRaw.FindAction("Joystick Pressed", throwIfNotFound: true);
        m_LeftHandRaw_Grip = m_LeftHandRaw.FindAction("Grip", throwIfNotFound: true);
        m_LeftHandRaw_GripPressed = m_LeftHandRaw.FindAction("Grip Pressed", throwIfNotFound: true);
        m_LeftHandRaw_HapticDevice = m_LeftHandRaw.FindAction("Haptic Device", throwIfNotFound: true);
        m_LeftHandRaw_TrackingState = m_LeftHandRaw.FindAction("Tracking State", throwIfNotFound: true);
        m_LeftHandRaw_UserPresent = m_LeftHandRaw.FindAction("UserPresent", throwIfNotFound: true);
        // RightHandRaw
        m_RightHandRaw = asset.FindActionMap("RightHandRaw", throwIfNotFound: true);
        m_RightHandRaw_Position = m_RightHandRaw.FindAction("Position", throwIfNotFound: true);
        m_RightHandRaw_Rotation = m_RightHandRaw.FindAction("Rotation", throwIfNotFound: true);
        m_RightHandRaw_Button1 = m_RightHandRaw.FindAction("Button 1", throwIfNotFound: true);
        m_RightHandRaw_Button1Touch = m_RightHandRaw.FindAction("Button 1 Touch", throwIfNotFound: true);
        m_RightHandRaw_Button2 = m_RightHandRaw.FindAction("Button 2", throwIfNotFound: true);
        m_RightHandRaw_Button2Touch = m_RightHandRaw.FindAction("Button 2 Touch", throwIfNotFound: true);
        m_RightHandRaw_Button3 = m_RightHandRaw.FindAction("Button 3", throwIfNotFound: true);
        m_RightHandRaw_Trigger = m_RightHandRaw.FindAction("Trigger", throwIfNotFound: true);
        m_RightHandRaw_TriggerPressed = m_RightHandRaw.FindAction("Trigger Pressed", throwIfNotFound: true);
        m_RightHandRaw_Joystick = m_RightHandRaw.FindAction("Joystick", throwIfNotFound: true);
        m_RightHandRaw_JoystickTouch = m_RightHandRaw.FindAction("Joystick Touch", throwIfNotFound: true);
        m_RightHandRaw_JoystickPressed = m_RightHandRaw.FindAction("Joystick Pressed", throwIfNotFound: true);
        m_RightHandRaw_Grip = m_RightHandRaw.FindAction("Grip", throwIfNotFound: true);
        m_RightHandRaw_GripPressed = m_RightHandRaw.FindAction("Grip Pressed", throwIfNotFound: true);
        m_RightHandRaw_HapticDevice = m_RightHandRaw.FindAction("Haptic Device", throwIfNotFound: true);
        m_RightHandRaw_TrackingState = m_RightHandRaw.FindAction("Tracking State", throwIfNotFound: true);
        m_RightHandRaw_UserPresent = m_RightHandRaw.FindAction("UserPresent", throwIfNotFound: true);
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_Rotation = m_Head.FindAction("Rotation", throwIfNotFound: true);
        m_Head_Position = m_Head.FindAction("Position", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_Turn = m_RightHand.FindAction("Turn", throwIfNotFound: true);
        m_RightHand_TeleportModeCancel = m_RightHand.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_RightHand_TeleportModeActivate = m_RightHand.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_RightHand_TeleportSelect = m_RightHand.FindAction("Teleport Select", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Turn = m_LeftHand.FindAction("Turn", throwIfNotFound: true);
        m_LeftHand_TeleportModeCancel = m_LeftHand.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_LeftHand_TeleportModeActivate = m_LeftHand.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_LeftHand_TeleportSelect = m_LeftHand.FindAction("Teleport Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHandRaw
    private readonly InputActionMap m_LeftHandRaw;
    private ILeftHandRawActions m_LeftHandRawActionsCallbackInterface;
    private readonly InputAction m_LeftHandRaw_Position;
    private readonly InputAction m_LeftHandRaw_Rotation;
    private readonly InputAction m_LeftHandRaw_Button1;
    private readonly InputAction m_LeftHandRaw_Button1Touch;
    private readonly InputAction m_LeftHandRaw_Button2;
    private readonly InputAction m_LeftHandRaw_Button2Touch;
    private readonly InputAction m_LeftHandRaw_Button3;
    private readonly InputAction m_LeftHandRaw_Trigger;
    private readonly InputAction m_LeftHandRaw_TriggerPressed;
    private readonly InputAction m_LeftHandRaw_Joystick;
    private readonly InputAction m_LeftHandRaw_JoystickTouch;
    private readonly InputAction m_LeftHandRaw_JoystickPressed;
    private readonly InputAction m_LeftHandRaw_Grip;
    private readonly InputAction m_LeftHandRaw_GripPressed;
    private readonly InputAction m_LeftHandRaw_HapticDevice;
    private readonly InputAction m_LeftHandRaw_TrackingState;
    private readonly InputAction m_LeftHandRaw_UserPresent;
    public struct LeftHandRawActions
    {
        private @VRInput m_Wrapper;
        public LeftHandRawActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_LeftHandRaw_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftHandRaw_Rotation;
        public InputAction @Button1 => m_Wrapper.m_LeftHandRaw_Button1;
        public InputAction @Button1Touch => m_Wrapper.m_LeftHandRaw_Button1Touch;
        public InputAction @Button2 => m_Wrapper.m_LeftHandRaw_Button2;
        public InputAction @Button2Touch => m_Wrapper.m_LeftHandRaw_Button2Touch;
        public InputAction @Button3 => m_Wrapper.m_LeftHandRaw_Button3;
        public InputAction @Trigger => m_Wrapper.m_LeftHandRaw_Trigger;
        public InputAction @TriggerPressed => m_Wrapper.m_LeftHandRaw_TriggerPressed;
        public InputAction @Joystick => m_Wrapper.m_LeftHandRaw_Joystick;
        public InputAction @JoystickTouch => m_Wrapper.m_LeftHandRaw_JoystickTouch;
        public InputAction @JoystickPressed => m_Wrapper.m_LeftHandRaw_JoystickPressed;
        public InputAction @Grip => m_Wrapper.m_LeftHandRaw_Grip;
        public InputAction @GripPressed => m_Wrapper.m_LeftHandRaw_GripPressed;
        public InputAction @HapticDevice => m_Wrapper.m_LeftHandRaw_HapticDevice;
        public InputAction @TrackingState => m_Wrapper.m_LeftHandRaw_TrackingState;
        public InputAction @UserPresent => m_Wrapper.m_LeftHandRaw_UserPresent;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandRaw; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandRawActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandRawActions instance)
        {
            if (m_Wrapper.m_LeftHandRawActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnRotation;
                @Button1.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton1;
                @Button1.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton1;
                @Button1.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton1;
                @Button1Touch.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton1Touch;
                @Button1Touch.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton1Touch;
                @Button1Touch.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton1Touch;
                @Button2.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton2;
                @Button2.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton2;
                @Button2.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton2;
                @Button2Touch.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton2Touch;
                @Button2Touch.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton2Touch;
                @Button2Touch.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton2Touch;
                @Button3.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton3;
                @Button3.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton3;
                @Button3.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnButton3;
                @Trigger.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTrigger;
                @TriggerPressed.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTriggerPressed;
                @Joystick.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystick;
                @JoystickTouch.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystickTouch;
                @JoystickTouch.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystickTouch;
                @JoystickTouch.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystickTouch;
                @JoystickPressed.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystickPressed;
                @JoystickPressed.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystickPressed;
                @JoystickPressed.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnJoystickPressed;
                @Grip.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnGrip;
                @GripPressed.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnGripPressed;
                @GripPressed.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnGripPressed;
                @GripPressed.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnGripPressed;
                @HapticDevice.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnHapticDevice;
                @TrackingState.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnTrackingState;
                @UserPresent.started -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnUserPresent;
                @UserPresent.performed -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnUserPresent;
                @UserPresent.canceled -= m_Wrapper.m_LeftHandRawActionsCallbackInterface.OnUserPresent;
            }
            m_Wrapper.m_LeftHandRawActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Button1.started += instance.OnButton1;
                @Button1.performed += instance.OnButton1;
                @Button1.canceled += instance.OnButton1;
                @Button1Touch.started += instance.OnButton1Touch;
                @Button1Touch.performed += instance.OnButton1Touch;
                @Button1Touch.canceled += instance.OnButton1Touch;
                @Button2.started += instance.OnButton2;
                @Button2.performed += instance.OnButton2;
                @Button2.canceled += instance.OnButton2;
                @Button2Touch.started += instance.OnButton2Touch;
                @Button2Touch.performed += instance.OnButton2Touch;
                @Button2Touch.canceled += instance.OnButton2Touch;
                @Button3.started += instance.OnButton3;
                @Button3.performed += instance.OnButton3;
                @Button3.canceled += instance.OnButton3;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @TriggerPressed.started += instance.OnTriggerPressed;
                @TriggerPressed.performed += instance.OnTriggerPressed;
                @TriggerPressed.canceled += instance.OnTriggerPressed;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @JoystickTouch.started += instance.OnJoystickTouch;
                @JoystickTouch.performed += instance.OnJoystickTouch;
                @JoystickTouch.canceled += instance.OnJoystickTouch;
                @JoystickPressed.started += instance.OnJoystickPressed;
                @JoystickPressed.performed += instance.OnJoystickPressed;
                @JoystickPressed.canceled += instance.OnJoystickPressed;
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
                @GripPressed.started += instance.OnGripPressed;
                @GripPressed.performed += instance.OnGripPressed;
                @GripPressed.canceled += instance.OnGripPressed;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @UserPresent.started += instance.OnUserPresent;
                @UserPresent.performed += instance.OnUserPresent;
                @UserPresent.canceled += instance.OnUserPresent;
            }
        }
    }
    public LeftHandRawActions @LeftHandRaw => new LeftHandRawActions(this);

    // RightHandRaw
    private readonly InputActionMap m_RightHandRaw;
    private IRightHandRawActions m_RightHandRawActionsCallbackInterface;
    private readonly InputAction m_RightHandRaw_Position;
    private readonly InputAction m_RightHandRaw_Rotation;
    private readonly InputAction m_RightHandRaw_Button1;
    private readonly InputAction m_RightHandRaw_Button1Touch;
    private readonly InputAction m_RightHandRaw_Button2;
    private readonly InputAction m_RightHandRaw_Button2Touch;
    private readonly InputAction m_RightHandRaw_Button3;
    private readonly InputAction m_RightHandRaw_Trigger;
    private readonly InputAction m_RightHandRaw_TriggerPressed;
    private readonly InputAction m_RightHandRaw_Joystick;
    private readonly InputAction m_RightHandRaw_JoystickTouch;
    private readonly InputAction m_RightHandRaw_JoystickPressed;
    private readonly InputAction m_RightHandRaw_Grip;
    private readonly InputAction m_RightHandRaw_GripPressed;
    private readonly InputAction m_RightHandRaw_HapticDevice;
    private readonly InputAction m_RightHandRaw_TrackingState;
    private readonly InputAction m_RightHandRaw_UserPresent;
    public struct RightHandRawActions
    {
        private @VRInput m_Wrapper;
        public RightHandRawActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_RightHandRaw_Position;
        public InputAction @Rotation => m_Wrapper.m_RightHandRaw_Rotation;
        public InputAction @Button1 => m_Wrapper.m_RightHandRaw_Button1;
        public InputAction @Button1Touch => m_Wrapper.m_RightHandRaw_Button1Touch;
        public InputAction @Button2 => m_Wrapper.m_RightHandRaw_Button2;
        public InputAction @Button2Touch => m_Wrapper.m_RightHandRaw_Button2Touch;
        public InputAction @Button3 => m_Wrapper.m_RightHandRaw_Button3;
        public InputAction @Trigger => m_Wrapper.m_RightHandRaw_Trigger;
        public InputAction @TriggerPressed => m_Wrapper.m_RightHandRaw_TriggerPressed;
        public InputAction @Joystick => m_Wrapper.m_RightHandRaw_Joystick;
        public InputAction @JoystickTouch => m_Wrapper.m_RightHandRaw_JoystickTouch;
        public InputAction @JoystickPressed => m_Wrapper.m_RightHandRaw_JoystickPressed;
        public InputAction @Grip => m_Wrapper.m_RightHandRaw_Grip;
        public InputAction @GripPressed => m_Wrapper.m_RightHandRaw_GripPressed;
        public InputAction @HapticDevice => m_Wrapper.m_RightHandRaw_HapticDevice;
        public InputAction @TrackingState => m_Wrapper.m_RightHandRaw_TrackingState;
        public InputAction @UserPresent => m_Wrapper.m_RightHandRaw_UserPresent;
        public InputActionMap Get() { return m_Wrapper.m_RightHandRaw; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandRawActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandRawActions instance)
        {
            if (m_Wrapper.m_RightHandRawActionsCallbackInterface != null)
            {
                @Position.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnPosition;
                @Rotation.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnRotation;
                @Button1.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton1;
                @Button1.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton1;
                @Button1.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton1;
                @Button1Touch.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton1Touch;
                @Button1Touch.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton1Touch;
                @Button1Touch.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton1Touch;
                @Button2.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton2;
                @Button2.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton2;
                @Button2.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton2;
                @Button2Touch.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton2Touch;
                @Button2Touch.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton2Touch;
                @Button2Touch.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton2Touch;
                @Button3.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton3;
                @Button3.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton3;
                @Button3.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnButton3;
                @Trigger.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTrigger;
                @Trigger.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTrigger;
                @Trigger.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTrigger;
                @TriggerPressed.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTriggerPressed;
                @TriggerPressed.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTriggerPressed;
                @Joystick.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystick;
                @JoystickTouch.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystickTouch;
                @JoystickTouch.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystickTouch;
                @JoystickTouch.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystickTouch;
                @JoystickPressed.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystickPressed;
                @JoystickPressed.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystickPressed;
                @JoystickPressed.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnJoystickPressed;
                @Grip.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnGrip;
                @Grip.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnGrip;
                @Grip.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnGrip;
                @GripPressed.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnGripPressed;
                @GripPressed.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnGripPressed;
                @GripPressed.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnGripPressed;
                @HapticDevice.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnHapticDevice;
                @HapticDevice.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnHapticDevice;
                @TrackingState.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTrackingState;
                @TrackingState.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTrackingState;
                @TrackingState.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnTrackingState;
                @UserPresent.started -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnUserPresent;
                @UserPresent.performed -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnUserPresent;
                @UserPresent.canceled -= m_Wrapper.m_RightHandRawActionsCallbackInterface.OnUserPresent;
            }
            m_Wrapper.m_RightHandRawActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Button1.started += instance.OnButton1;
                @Button1.performed += instance.OnButton1;
                @Button1.canceled += instance.OnButton1;
                @Button1Touch.started += instance.OnButton1Touch;
                @Button1Touch.performed += instance.OnButton1Touch;
                @Button1Touch.canceled += instance.OnButton1Touch;
                @Button2.started += instance.OnButton2;
                @Button2.performed += instance.OnButton2;
                @Button2.canceled += instance.OnButton2;
                @Button2Touch.started += instance.OnButton2Touch;
                @Button2Touch.performed += instance.OnButton2Touch;
                @Button2Touch.canceled += instance.OnButton2Touch;
                @Button3.started += instance.OnButton3;
                @Button3.performed += instance.OnButton3;
                @Button3.canceled += instance.OnButton3;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @TriggerPressed.started += instance.OnTriggerPressed;
                @TriggerPressed.performed += instance.OnTriggerPressed;
                @TriggerPressed.canceled += instance.OnTriggerPressed;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @JoystickTouch.started += instance.OnJoystickTouch;
                @JoystickTouch.performed += instance.OnJoystickTouch;
                @JoystickTouch.canceled += instance.OnJoystickTouch;
                @JoystickPressed.started += instance.OnJoystickPressed;
                @JoystickPressed.performed += instance.OnJoystickPressed;
                @JoystickPressed.canceled += instance.OnJoystickPressed;
                @Grip.started += instance.OnGrip;
                @Grip.performed += instance.OnGrip;
                @Grip.canceled += instance.OnGrip;
                @GripPressed.started += instance.OnGripPressed;
                @GripPressed.performed += instance.OnGripPressed;
                @GripPressed.canceled += instance.OnGripPressed;
                @HapticDevice.started += instance.OnHapticDevice;
                @HapticDevice.performed += instance.OnHapticDevice;
                @HapticDevice.canceled += instance.OnHapticDevice;
                @TrackingState.started += instance.OnTrackingState;
                @TrackingState.performed += instance.OnTrackingState;
                @TrackingState.canceled += instance.OnTrackingState;
                @UserPresent.started += instance.OnUserPresent;
                @UserPresent.performed += instance.OnUserPresent;
                @UserPresent.canceled += instance.OnUserPresent;
            }
        }
    }
    public RightHandRawActions @RightHandRaw => new RightHandRawActions(this);

    // Head
    private readonly InputActionMap m_Head;
    private IHeadActions m_HeadActionsCallbackInterface;
    private readonly InputAction m_Head_Rotation;
    private readonly InputAction m_Head_Position;
    public struct HeadActions
    {
        private @VRInput m_Wrapper;
        public HeadActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Head_Rotation;
        public InputAction @Position => m_Wrapper.m_Head_Position;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void SetCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterface != null)
            {
                @Rotation.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnRotation;
                @Position.started -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_HeadActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_HeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public HeadActions @Head => new HeadActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private IRightHandActions m_RightHandActionsCallbackInterface;
    private readonly InputAction m_RightHand_Turn;
    private readonly InputAction m_RightHand_TeleportModeCancel;
    private readonly InputAction m_RightHand_TeleportModeActivate;
    private readonly InputAction m_RightHand_TeleportSelect;
    public struct RightHandActions
    {
        private @VRInput m_Wrapper;
        public RightHandActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_RightHand_Turn;
        public InputAction @TeleportModeCancel => m_Wrapper.m_RightHand_TeleportModeCancel;
        public InputAction @TeleportModeActivate => m_Wrapper.m_RightHand_TeleportModeActivate;
        public InputAction @TeleportSelect => m_Wrapper.m_RightHand_TeleportSelect;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void SetCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTurn;
                @TeleportModeCancel.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeActivate.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportSelect.started -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.performed -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.canceled -= m_Wrapper.m_RightHandActionsCallbackInterface.OnTeleportSelect;
            }
            m_Wrapper.m_RightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                @TeleportSelect.started += instance.OnTeleportSelect;
                @TeleportSelect.performed += instance.OnTeleportSelect;
                @TeleportSelect.canceled += instance.OnTeleportSelect;
            }
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_Turn;
    private readonly InputAction m_LeftHand_TeleportModeCancel;
    private readonly InputAction m_LeftHand_TeleportModeActivate;
    private readonly InputAction m_LeftHand_TeleportSelect;
    public struct LeftHandActions
    {
        private @VRInput m_Wrapper;
        public LeftHandActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_LeftHand_Turn;
        public InputAction @TeleportModeCancel => m_Wrapper.m_LeftHand_TeleportModeCancel;
        public InputAction @TeleportModeActivate => m_Wrapper.m_LeftHand_TeleportModeActivate;
        public InputAction @TeleportSelect => m_Wrapper.m_LeftHand_TeleportSelect;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTurn;
                @TeleportModeCancel.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeCancel.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportModeCancel;
                @TeleportModeActivate.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportModeActivate.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportModeActivate;
                @TeleportSelect.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportSelect;
                @TeleportSelect.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnTeleportSelect;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @TeleportModeCancel.started += instance.OnTeleportModeCancel;
                @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
                @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
                @TeleportModeActivate.started += instance.OnTeleportModeActivate;
                @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
                @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
                @TeleportSelect.started += instance.OnTeleportSelect;
                @TeleportSelect.performed += instance.OnTeleportSelect;
                @TeleportSelect.canceled += instance.OnTeleportSelect;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);
    public interface ILeftHandRawActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnButton1(InputAction.CallbackContext context);
        void OnButton1Touch(InputAction.CallbackContext context);
        void OnButton2(InputAction.CallbackContext context);
        void OnButton2Touch(InputAction.CallbackContext context);
        void OnButton3(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnJoystickTouch(InputAction.CallbackContext context);
        void OnJoystickPressed(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnUserPresent(InputAction.CallbackContext context);
    }
    public interface IRightHandRawActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnButton1(InputAction.CallbackContext context);
        void OnButton1Touch(InputAction.CallbackContext context);
        void OnButton2(InputAction.CallbackContext context);
        void OnButton2Touch(InputAction.CallbackContext context);
        void OnButton3(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnTriggerPressed(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnJoystickTouch(InputAction.CallbackContext context);
        void OnJoystickPressed(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnGripPressed(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnUserPresent(InputAction.CallbackContext context);
    }
    public interface IHeadActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportSelect(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportSelect(InputAction.CallbackContext context);
    }
}
